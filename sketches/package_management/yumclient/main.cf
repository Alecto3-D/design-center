body file control
{
  namespace => "cfdc_yumclient";
}

bundle agent repo_yum_client(class_prefix, repos_dir, repos)
{
# Configure yum repository clients
  meta:
      "vars[class_prefix][type]"     string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"  string => "__CLASS_PREFIX__";

      "vars[ensure_absent][type]"           string => "CONTEXT";
      "vars[ensure_absent][default]"        string => "!any";

      "vars[empty_section][type]"           string => "CONTEXT";
      "vars[empty_section][default]"        string => "!any";

      "vars[repos][type]"              string => "KVARRAY(
_key:NON_EMPTY_STRING
baseurl:HTTP_URL|FTP_URL|FILE_URL:required
enabled:BOOLEAN:default=1
gpgcheck:=yes|=no:default=no
)";
      # repos[identifier][name] string => optional
      # repos[identifier][baseurl] string =>  required
      # repos[identifier][enabled] string => optional
      # repos[identifier][gpgcheck] string => optional

      "vars[repos_dir][type]"             string => "PATH";
      "vars[repos_dir][default]"             string => "/etc/yum.repos.d";

  vars:
      "repo_ids" slist => getindices("$(repos)");

  classes:
      "_debug_repo_yum_client" or => { "debug" };

  methods:
      "Yum Repository Client Configuration"
      usebundle => cfdc_yumclient.repo_yum_client_config($(class_prefix),
                                                         $(repos_dir),
                                                         $(repos),
                                                         $(repo_ids)),
      comment => "Configure yum client for each repository";

  reports:
    verbose::
      "Found repo $(repo_ids) in array $(repos).  Will configure it in $(repos_dir)";
}

bundle agent repo_yum_client_config(class_prefix, repos_dir, repos, repo)
# This allows us to have dynamic second index on the repo array
# It does mean that this bundle must be activated for each repository
# but it seems better than the alternative of knowing all possible options
# to in the config when there are so many yum plugins possible.
{
  vars:
      "bundle" string => "repo_yum_client_config";
      "variables" slist => getindices("$(repos)[$(repo)]");

      "editor" string => "cfdc_yumclient.yumclient_set_variable_values_ini",
      ifvarclass => "!$(class_prefix)empty_section";

      "editor" string => "cfdc_yumclient.yumclient_manage_variable_values_ini",
      ifvarclass => "$(class_prefix)empty_section";

      "owner" string => getenv("LOGNAME", 100),
      ifvarclass => "test";

      "owner" string => "root",
      ifvarclass => "!test";

  classes:
      "_debug_repo_yum_client" or => { "debug" };

      "baseurl_defined" expression => regcmp("(file|https?)+://.+",
                                             "$($(repos)[$(repo)][baseurl])");

  files:
      "$(repos_dir)/$(repo).repo"
      create => "true",
      handle => "create_file_$(repo)",
      perms => default.mog("644", $(owner), $(owner)),
      edit_line => default.append_if_no_line("[#EOF#]"),
      comment => "This is to work around an old bug that caused
region selection to fail because EOF was not
detected as end of region",
      ifvarclass => and(
                         "baseurl_defined",
                         not("$(class_prefix)ensure_absent")
                       );

      "$(repos_dir)/$(repo).repo"
      create => "true",
      perms => default.mog("644", $(owner), $(owner)),
      edit_defaults => default.no_backup,
      handle => "$(bundle)_files_$(repo)_ensure_present",
      edit_line => $(editor)($(repos), $(repo));

      "$(repos_dir)/$(repo).repo"
      delete => default.tidy,
      comment => "When the mgmt_policy is set to ensure_absent we just nuke the repofile",
      ifvarclass => and(
                         "baseurl_defined",
                         "$(class_prefix)ensure_absent"
                       );

  reports:
    _debug_repo_yum_client::
      "DEBUG $(bundle)  $(repo) $(variables)=$($(repos)[$(repo)][$(variables)])";

      "DEBUG $(bundle)  empty_section: false, editor=$(editor)",
      ifvarclass => "!$(class_prefix)empty_section";

      "DEBUG $(bundle)  empty_section: true, editor=$(editor)",
      ifvarclass => "$(class_prefix)empty_section";

      "DEBUG $(bundle)  required $(repo) baseurl defined = $($(repos)[$(repo)][baseurl])",
      ifvarclass => "baseurl_defined";

      "DEBUG $(bundle)  No action should be taken, $(repo) baseurl not defined",
      ifvarclass => not("baseurl_defined");

      "DEBUG $(bundle)  ensure_absent is not set; writing $(repos_dir)/$(repo).repo",
      ifvarclass => "!$(class_prefix)ensure_absent";

      "DEBUG $(bundle)  ensure_absent is set; removing $(repos_dir)/$(repo).repo",
      ifvarclass => "$(class_prefix)ensure_absent";

      "DEBUG $(bundle)  repos_dir: $(repos_dir)";
}

bundle edit_line yumclient_manage_variable_values_ini(tab, sectionName)
# Sets the RHS of configuration items in the file of the form
# LHS=RHS
# If the line is commented out with #, it gets uncommented first.
# Adds a new line if none exists.
# Removes any variable value pairs not defined for the ini section
# The argument is an associative array containing tab[SectionName][LHS]="RHS"
# don't change value when the RHS is dontchange

# Based on set_variable_values_ini
# Added delete lines section to empty out undefined variable values for INI section

# CAUTION : REQUIRES CFEngine 3.4.0
{
  vars:
      "index" slist => getindices("$(tab)[$(sectionName)]");

      # Be careful if the index string contains funny chars
      "cindex[$(index)]" string => canonify("$(index)");

  classes:
      "edit_$(cindex[$(index)])"     not => strcmp("$($(tab)[$(sectionName)][$(index)])","dontchange"),
      comment => "Create conditions to make changes";

      "yumclient_manage_variable_values_ini_$(sectionName)_exists"
      expression => regline(".*[$(sectionName)].*", "$(edit.filename)");

  field_edits:

      # If the line is there, but commented out, first uncomment it
      "#+$(index)\s*=.*"
      select_region => default.INI_section("$(sectionName)"),
      edit_field => default.col("=","1","$(index)","set"),
      ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

      # match a line starting like the key something
      "$(index)\s*=.*"
      edit_field => default.col("=","2","$($(tab)[$(sectionName)][$(index)])","set"),
      select_region => default.INI_section("$(sectionName)"),
      classes => default.if_ok("yumclient_manage_variable_values_ini_not_$(cindex[$(index)])"),
      ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

  delete_lines:
      ".*"
      select_region => default.INI_section("$(sectionName)"),
      ifvarclass => "yumclient_manage_variable_values_ini_$(sectionName)_exists",
      comment       => "Remove all entries in the region so there are no extra entries";

  insert_lines:
      "[$(sectionName)]"
      location => default.start,
      #classes => default.if_ok("yumclient_manage_variable_values_ini_$(sectionName)_exists"),
      comment => "Insert lines";

      "$(index)=$($(tab)[$(sectionName)][$(index)])",
      select_region => default.INI_section("$(sectionName)"),
      ifvarclass => "!yumclient_manage_variable_values_ini_not_$(cindex[$(index)]).edit_$(cindex[$(index)]).yumclient_manage_variable_values_ini_$(sectionName)_exists";

  reports:
    debug::
      "DEBUG Managing INI $(tab) $(sectionName)";
}

bundle edit_line yumclient_set_variable_values_ini(tab, sectionName)
# Sets the RHS of configuration items in the file of the form
# LHS=RHS
# If the line is commented out with #, it gets uncommented first.
# Adds a new line if none exists.
# Removes any variable value pairs not defined for the ini section
# The argument is an associative array containing tab[SectionName][LHS]="RHS"
# don't change value when the RHS is dontchange

# Based on yumclient_set_variable_values_ini

# CAUTION : REQUIRES CFEngine 3.4.0
{
  vars:
      "index" slist => getindices("$(tab)[$(sectionName)]");

      # Be careful if the index string contains funny chars
      "cindex[$(index)]" string => canonify("$(index)");

  classes:
      "edit_$(cindex[$(index)])"     not => strcmp("$($(tab)[$(sectionName)][$(index)])","dontchange"),
      comment => "Create conditions to make changes";

      "yumclient_set_variable_values_ini_$(sectionName)_exists"
      expression => regline(".*[$(sectionName)].*", "$(edit.filename)");

  field_edits:

      # If the line is there, but commented out, first uncomment it
      "#+$(index)\s*=.*"
      select_region => default.INI_section("$(sectionName)"),
      edit_field => default.col("=","1","$(index)","set"),
      ifvarclass => "yumclient_set_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

      # match a line starting like the key something
      "$(index)\s*=.*"
      edit_field => default.col("=","2","$($(tab)[$(sectionName)][$(index)])","set"),
      select_region => default.INI_section("$(sectionName)"),
      classes => default.if_ok("yumclient_set_variable_values_ini_not_$(cindex[$(index)])"),
      ifvarclass => "yumclient_set_variable_values_ini_$(sectionName)_exists.edit_$(cindex[$(index)])";

  insert_lines:
      "[$(sectionName)]"
      location => default.start,
      #classes => default.if_ok("yumclient_set_variable_values_ini_$(sectionName)_exists"),
      comment => "Insert lines";

      "$(index)=$($(tab)[$(sectionName)][$(index)])",
      select_region => default.INI_section("$(sectionName)"),
      ifvarclass => "!yumclient_set_variable_values_ini_not_$(cindex[$(index)]).edit_$(cindex[$(index)]).yumclient_set_variable_values_ini_$(sectionName)_exists";

  reports:
    debug::
      "DEBUG Setting INI $(tab) $(sectionName)";
}
