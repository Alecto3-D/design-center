body file control
{
      namespace => "cfdc_config_resolver";
}

bundle agent resolver(class_prefix, file, nameserver, search, domain, options, sortlist)
{
  meta:
      "vars[class_prefix][type]"     string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"  string => "__CLASS_PREFIX__";

      "vars[empty_first][type]"      string => "CONTEXT";
      "vars[empty_first][default]"   string => "!any";

      "vars[defined_only][type]"     string => "CONTEXT";
      "vars[defined_only][default]"  string => "!any";

      "vars[debug][type]"            string => "CONTEXT";
      "vars[debug][default]"         string => "!any";

      "vars[test][type]"             string => "CONTEXT";
      "vars[test][default]"          string => "!any";

      "vars[verbose][type]"          string => "CONTEXT";
      "vars[verbose][default]"       string => "!any";

      "vars[file][type]"             string => "PATH";
      "vars[file][default]"          string => "/etc/resolv.conf";

      "vars[nameserver][type]"       string => "LIST(NON_EMPTY_STRING)";
      "vars[search][type]"           string => "LIST(NON_EMPTY_STRING)";
      "vars[domain][type]"           string => "LIST(NON_EMPTY_STRING)";
      "vars[options][type]"          string => "LIST(NON_EMPTY_STRING)";
      "vars[sortlist][type]"         string => "LIST(NON_EMPTY_STRING)";

  classes:
      "debug_resolver" or => { "$(class_prefix)debug", "debug" };
      "only_allow_defined_entries" expression => "$(class_prefix)defined_only";
      "empty_first" expression => "$(class_prefix)empty_first";

  vars:
      "iter" slist => { "nameserver", "search", "domain", "options", "sortlist" };

    !empty_first::
      "empty_file_before_editing" string => "false", policy => "free";
    empty_first::
      "empty_file_before_editing" string => "true",  policy => "free";

  files:
      "$(file)"
      handle        => "cfdc_config_resolver_files_$(file)",
      create        => "true",
      edit_defaults => cfdc_config_resolver.empty_if_ask($(empty_file_before_editing)),
      comment       => "Empty resolver file : $(file)";

  methods:
      "iterate" usebundle => cfdc_config_resolver.resolver_iterate($(class_prefix),
                                                                   $(file),
                                                                   $(iter));

  reports:
    debug_resolver::
      "main  @@ editing file $(file) for setting $(iter)";
}

bundle agent resolver_iterate(class_prefix, file, var)
{
  files:
      "$(file)"
      handle    => "cfdc_config_resolver_files_$(file)_$(var)",
      edit_line => cfdc_config_resolver.append_if_no_lines($(class_prefix), $(var), "$($(var))"),
      comment   => "configure $(var) resolver settings in $(file)";
}

body edit_defaults empty_if_ask(empty_file_before_editing)
{
      edit_backup => "false";
      max_file_size => "300000";
      empty_file_before_editing => "$(empty_file_before_editing)";
}

bundle edit_line append_if_no_lines(class_prefix, key, list)
{
  classes:
      "only_allow_defined_entries" expression => "$(class_prefix)defined_only";

  delete_lines:
    only_allow_defined_entries::
      "$(key).*",
      comment => "Reset $(key) lines from resolver";

  insert_lines:
      "$(key) $(list)"
      comment => "Append lines to the file if they don't already exist";
}
