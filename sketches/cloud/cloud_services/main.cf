body file control
{
  namespace => "cfdc_cloud_services";
}

bundle agent cloud_services(prefix, bundle_home, install_cfengine, stype, count, class, state, ec2, vcli)
{
  meta:
      # __PREFIX__ will be supplied by cf-sketch
      "vars[prefix][type]"               string => "NON_EMPTY_STRING";
      "vars[prefix][default]"            string => "__PREFIX__";

      # __BUNDLE_HOME__ will be          supplied by cf-sketch
      "vars[bundle_home][type]"          string => "NON_EMPTY_STRING";
      "vars[bundle_home][default]"       string => "__BUNDLE_HOME__";

      "vars[install_cfengine][type]"     string => "BOOLEAN";
      "vars[install_cfengine][default]"  string => "1";

      "vars[stype][type]"                string => "=ec2|=vcli";

      "vars[count][type]"                string => "DIGITS";

      "vars[class][type]"                string => "CONTEXT_NAME";

      "vars[state][type]"                string => "=start|=stop";
      "vars[state][default]"             string => "start";

      "vars[install_cfengine][type]"     string => "BOOLEAN";
      "vars[install_cfengine][default]"  string => "1";

      # you'd say 'ami:NON_EMPTY_STRING:required' if that key was required

      "vars[ec2][type]"                  string => "ARRAY(
ami            :NON_EMPTY_STRING,
instance_type  :NON_EMPTY_STRING,
region         :NON_EMPTY_STRING:default=us-east-1,
security_group :NON_EMPTY_STRING,
aws_access_key :NON_EMPTY_STRING,
aws_secret_key :NON_EMPTY_STRING,
ssh_pub_key    :PATH
)";
      "vars[ec2][default]"               string => "{}";

      "vars[vcli][type]"                 string => "ARRAY(
master_image       :NON_EMPTY_STRING,
child_prefix       :NON_EMPTY_STRING,
esxi_server        :IPv4_ADDRESS,
user               :NON_EMPTY_STRING,
password           :NON_EMPTY_STRING,
datastore          :NON_EMPTY_STRING,
fullpath           :PATH,
disable_ssl_verify :BOOLEAN:default=0
)";
      "vars[vcli][default]"              string => "{}";

  classes:

  vars:
      "canon_prefix" string => canonify("$(prefix)");
      "home"         string => "$($(prefix)bundle_home)";

  services:
      "$(count) $(class)"
      service_policy => "$(state)",
      service_method => cloud_services_handler,
      ifvarclass => "$(canon_prefix)prepared";

  reports:
    verbose::
      "Invoking cloud_services: $(cloud_context.count) $(cloud_context.class)"
      ifvarclass => "$(canon_prefix)prepared";

      "Not invoking cloud_services, no match for context $(contexts)"
      ifvarclass => "!$(canon_prefix)prepared";
}

body service_method cloud_services_handler
{
      service_bundle => $(cloud_context.stype)("$(sys.ipv4)", "$(this.promiser)", "$(this.service_policy)");
      service_dependence_chain => "start_parent_services";
}

bundle agent ec2(hub, service, state)
{
  classes:
      "parsed_ok" expression => regextract(
                                            "(\d+) (\S+)",
                                            "$(service)",
                                            "params"
                                          );

      "start"   expression => strcmp("start",  "$(state)");
      "stop"    expression => strcmp("stop",   "$(state)");

      "count_determined" expression => isvariable("current_count");

    parsed_ok.count_determined::
      "change_not_needed" expression => strcmp("$(instances)", "$(current_count)");
      "bootstrap_needed" expression => isgreaterthan("$(instances)", "$(current_count)");
      "decom_needed" expression => islessthan("$(instances)", "$(current_count)");

  vars:
    parsed_ok::
      "class" string => "$(params[2])";
      "prefix" string => "$(cloud_context.active_prefix)";

      "ec2_param_names" slist => getindices("$(prefix)ec2");
      "ec2_params" slist => maplist("--ec2 $(this)=$($(prefix)ec2[$(this)])", "ec2_param_names");

      "shim" string => concat("$($(prefix)bundle_home)/scripts/shim.pl ", join(" ", "ec2_params"), " --hub=$(hub) --install_cfengine=$($(prefix)contexts_text[install_cfengine]) ec2");

      "current_count" string => execresult("$(shim) count $(class)", "useshell");

    parsed_ok.start::
      "instances" string => "$(params[1])";
      # catch "stop" and "disable"
    parsed_ok.stop::
      "instances" string => "0";

  commands:
    count_determined.!change_not_needed::
      "$(shim) control $(instances) $(class)";

  reports:

    count_determined::
      "Current count of service '$(service)' = $(current_count)";
    count_determined.cloud_services_verbose::
      "To run a command, e.g. ssh to all machine (but beware, this works best if you have just a few instances): $(shim) run $(class) 'ssh -i YOUR-PRIVATE-SSH-KEY -l ubuntu'";
      "To see the console output of all the machines: $(shim) console $(class)";
      "To list all the machines (just node names or all info, including DNS): $(shim) [list|list-full] $(class)";
    !parsed_ok::
      "Sorry, service '$(service)' could not be parsed to pass to the shim!";
    count_determined.start.change_not_needed::
      "Service '$(service)' does not need to be started by the shim: $(instances) instances of class $(class) already exist";
    count_determined.stop.change_not_needed::
      "Service '$(service)' does not need to be stopped by the shim: we have $(instances) instances of class $(class)";
    count_determined.start.!change_not_needed::
      "Service '$(service)' will be started by the shim: $(instances) instances of class $(class) (current $(current_count))";
    count_determined.stop.!change_not_needed::
      "Service '$(service)' will be stopped by the shim: $(instances) instances (current $(current_count)) of class $(class) ";
    bootstrap_needed::
      "Bootstrapping will be needed";
    decom_needed::
      "Decom will be needed";
    cfengine::
      "EC2 goal: put service '$(service)' in state $(state).";
}

bundle agent vcli(hub, service, state)
{
  classes:
      "parsed_ok" expression => regextract(
                                            "(\d+) (\S+)",
                                            "$(service)",
                                            "params"
                                          );

      "ssl_noverify" expression => strcmp("$(cloud_context.disable_ssl_verify)", "1");

    parsed_ok.!decided::
      "decided" expression => usemodule("$(perl)",
                                        "$(vcli_decision_module) $(vcli_decision_args)");

    decided::
      "vcli_decision_valid" expression => regcmp("[^$]+","$(perl.current_count)");

  vars:
    debug::
      "cmd_prefix" string => "/bin/echo ",
      policy => "free";
    !debug.ssl_noverify::
      "cmd_prefix" string => "/usr/bin/env PERL_LWP_SSL_VERIFY_HOSTNAME=0 ",
      policy => "free";
    !debug.!ssl_noverify::
      "cmd_prefix" string => "",
      policy => "free";

    parsed_ok::
      "class"  string => "$(params[2])";
      "prefix" string => "$(cloud_context.active_prefix)";

      "master_image" string => "$($(prefix)vcli[master_image])";
      "child_prefix" string => "$($(prefix)vcli[child_prefix])";

      # NB: these are in /bin or /usr/bin or... but it varies on many
      # systems, so we'll just accept whatever is in the PATH
      "grep"  string => "grep";

      # adjust for your Perl install, but any Perl should be able to handle this
      "perl"  string => "../../../usr/bin/perl";

      "vifs"  string => "$(cmd_prefix)/usr/bin/vifs";
      "vmcmd" string => "$(cmd_prefix)/usr/bin/vmware-cmd";
      "vmkfs" string => "$(cmd_prefix)/usr/bin/vmkfstools";

      "u"      string => "$($(prefix)vcli[user])";
      "p"      string => "$($(prefix)vcli[password])";
      "path"   string => "$($(prefix)vcli[fullpath])";
      "ds"     string => "$($(prefix)vcli[datastore])";
      "srv"    string => "$($(prefix)vcli[esxi_server])";

      "VIFS_BASE"       string => "$(vifs) --server $(srv) --username $(u) --password $(p)";
      "VIFS_COPY"       string => "$(VIFS_BASE) -c";
      "VIFS_DELETE"     string => "$(VIFS_BASE) -r";
      "VIFS_DIR"        string => "$(VIFS_BASE) -D";
      "VIFS_GET"        string => "$(VIFS_BASE) -get";
      "VIFS_MKDIR"      string => "$(VIFS_BASE) -M";
      "VIFS_PUT"        string => "$(VIFS_BASE) -put";

      "VMCMD_BASE"      string => "$(vmcmd) -H $(srv) -U $(u) -P $(p)";
      "VMCMD_PREFIX"    string => "$(VMCMD_BASE) $(path)";

      "VMCMD_LIST"      string => "$(VMCMD_BASE) -l";
      "VMCMD_LIST_OURS" string => "$(VMCMD_LIST) | $(grep) -v $(master_image) | $(grep) $(child_prefix) | $(grep) $(path)";
      "VMCMD_REG"       string => "$(VMCMD_BASE) -s register";
      "VMKFSTOOLS"      string => "$(vmkfs) --server $(srv) --username $(u) --password $(p) -i";

      "vcli_decision_module" string => "sketches/$(cloud_services.home)/modules/vcli_decision";
      "vcli_decision_args" string => "'$(VMCMD_LIST_OURS)' '$(state)' '$(params[1])' '$(child_prefix)'";

    vcli_decision_valid::
      "VMCMD_STOP"  string => "$(VMCMD_PREFIX)/$(perl.decom_instance)/$(perl.decom_instance).vmx stop soft";
      "VMCMD_UNREG" string => "$(VMCMD_BASE) -s unregister $(path)/$(perl.decom_instance)/$(perl.decom_instance).vmx";

  methods:
    vcli_decision_valid.bootstrap_needed::
      # clone the needed bootstraps
      "CLONE"  usebundle => vmware_clone("$(master_image)", "$(perl.bootstrap_instance)");
      "START"  usebundle => vmware_start("$(perl.bootstrap_instance)");
      # start all our client instances if a bootstrap is needed
      "START"  usebundle => vmware_start("$(perl.our_instances)");

    vcli_decision_valid.decom_needed::
      # "STOP"   usebundle => vmware_stop("$(perl.decom_instance)");
      "DELETE" usebundle => vmware_delete("$(perl.decom_instance)");

  reports:
    vcli_decision_valid.bootstrap_needed::
      "Service '$(service)' requires bootstrap: requested instance $(perl.bootstrap_instance) of class $(class) (current $(perl.current_count))";
    vcli_decision_valid.decom_needed::
      "Service '$(service)' requires decom: requested instance $(perl.decom_instance) of class $(class) (current $(perl.current_count))";
    vcli_decision_valid.nothing_needed::
      "Service '$(service)' requires no action: it already has $(perl.current_count) instances of class $(class)";
    !vcli_decision_valid::
      "The vcli_decision module \"$(vcli_decision_module) $(vcli_decision_args)\"could not be executed";
    verbose::
      "We will list our client instances with '$(VMCMD_LIST_OURS)'";
      "The vifs commands will start with $(VIFS_BASE)";
}

# -----------------------------------------------------------------------------

bundle agent vmware_clone(vm_source, vm_clone)
{
  vars:
    any::
      "reg_status" string => execresult("$(vcli.VMCMD_LIST)","useshell"),
      policy => "free";

      #

  classes:
    any::
      "have_source_dir"  expression => returnszero("$(vcli.VIFS_DIR) \"[$(vcli.ds)] $(vm_source)/\" > /dev/null","useshell");
      "have_clone_dir"   expression => returnszero("$(vcli.VIFS_DIR) \"[$(vcli.ds)] $(vm_clone)/\"  > /dev/null","useshell");
      "have_clone_vmx"   expression => fileexists("/tmp/$(vm_clone).vmx");
      "clone_registered" expression => regcmp(".*$(vm_clone).*","$(reg_status)");
      #

  files:
    clean_up::
      "/tmp/$(vm_clone).vmx.*"
      delete => default.tidy;

    have_clone_vmx.!clone_registered::
      "/tmp/$(vm_clone).vmx"
      edit_line => reconfigurevmx("$(vm_source)","$(vm_clone)"),
      classes => default.if_repaired("then_upload");

      #

  commands:
    have_source_dir.!have_clone_dir::
      "$(vcli.VIFS_MKDIR) \"[$(vcli.ds)] $(vm_clone)/\"";
      "$(vcli.VMKFSTOOLS) \"[$(vcli.ds)] $(vm_source)/$(vm_source).vmdk\" \"[$(vcli.ds)] $(vm_clone)/$(vm_clone).vmdk\"";
      "$(vcli.VIFS_COPY) \"[$(vcli.ds)] $(vm_source)/$(vm_source).nvram\" \"[$(vcli.ds)] $(vm_clone)/$(vm_clone).nvram\"";

    !have_clone_vmx.!have_clone_dir::
      "$(vcli.VIFS_GET) \"[$(vcli.ds)] $(vm_source)/$(vm_source).vmx\" /tmp/$(vm_clone).vmx";

    then_upload::
      "$(vcli.VIFS_PUT) /tmp/$(vm_clone).vmx \"[$(vcli.ds)] $(vm_clone)/$(vm_clone).vmx\""
      classes => default.if_repaired("register_vm");

    register_vm.!clone_registered::
      "$(vcli.VMCMD_REG) $(vcli.path)/$(vm_clone)/$(vm_clone).vmx"
      classes => default.if_repaired("clean_up");

  reports:
    verbose::
      "###### cloning VM $(vm_source) into VM $(vm_clone) ######";
    verbose.have_source_dir::
      "The source directory \"[$(vcli.ds)] $(vm_source)/\" exists";
    verbose.have_clone_dir::
      "The clone target directory \"[$(vcli.ds)] $(vm_clone)/\" exists.  Remove it with \"$(vcli.VIFS_DELETE) \"[$(vcli.ds)] $(vm_clone)\" -f\"";
}

#####

bundle edit_line reconfigurevmx(s,c)
{
  delete_lines:
      ".*uuid.*";
      ".*extendedConfigFile.*";
      ".*$(s).*";
      ".*sched.swap.derivedName.*";

  insert_lines:
      "nvram = \"$(c).nvram\"";
      "displayName = \"$(c)\"";
      "scsi0:0.fileName = \"$(c).vmdk\"";
}

# -----------------------------------------------------------------------------

bundle agent vmware_start(vm_name)
{
  vars:
    vm_valid::
      "reg_status" string => execresult("$(vcli.VMCMD_LIST)","useshell"),
      policy => "free";
      "vm_status"  string => execresult("$(vcli.VMCMD_PREFIX)/$(vm_name)/$(vm_name).vmx getstate","useshell"),
      policy => "free";

      #

  classes:
    any::
      "vm_valid"        expression => regcmp("[^ ]+","$(vm_name)");
      "vm_registered"   expression => regcmp(".*$(vm_name).*","$(reg_status)");
      "vm_is_off"       expression => regcmp(".*off","$(vm_status)");
      "vm_is_suspended" expression => regcmp(".*suspended","$(vm_status)");

      "no_reg_status"   not => isvariable("reg_status");

      #
  commands:
    vm_valid.vm_registered.(vm_is_off|vm_is_suspended)::
      "$(vcli.VMCMD_PREFIX)/$(vm_name)/$(vm_name).vmx start";

  reports:
    verbose::
      "###### checking if VM $(vm_name) needs to be started ######";
    verbose.vm_valid::
      "###### VM $(vm_name) IS VALID ######";
    verbose.!vm_valid::
      "###### VM $(vm_name) IS INVALID ######";
    verbose.vm_registered::
      "###### VM $(vm_name) IS REGISTERED ######";
    verbose.vm_is_off::
      "###### VM $(vm_name) IS OFF ######";
    verbose.vm_is_suspended::
      "###### VM $(vm_name) IS SUSPENDED ######";
}


# -----------------------------------------------------------------------------

bundle agent vmware_stop(vm_name)
{
  vars:
    any::
      "parameters" slist => getindices("$(inputs)");

      "reg_status" string => execresult("$(vcli.VMCMD_LIST_OURS)","useshell"),
      policy => "free";
      "vm_status"  string => execresult("$(vcli.VMCMD_PREFIX)/$(vm_name)/$(vm_name).vmx getstate","useshell"),
      policy => "free";

      #

  classes:
    any::
      "vm_registered"   expression => regcmp(".*$(vm_name).*","$(reg_status)");
      "vm_is_on"        expression => regcmp(".*on","$(vm_status)");

      #

  commands:
    vm_registered.vm_is_on::
      "$(vcli.VMCMD_STOP)";

  reports:
    verbose::
      "###### checking if VM $(vm_name) needs to be stopped ######";
    verbose.vm_registered::
      "###### VM $(vm_name) is registered ######";
    verbose.vm_is_on::
      "###### VM $(vm_name) is running ######";
}

# -----------------------------------------------------------------------------

bundle agent vmware_delete(vm_name)
{
  vars:
    any::
      "canon_prefix" string => canonify("$(vm_name)");

      "reg_status" string => execresult("$(vcli.VMCMD_LIST)","useshell"),
      policy => "free";
      "vm_status"  string => execresult("$(vcli.VMCMD_PREFIX)/$(vm_name)/$(vm_name).vmx getstate","useshell"),
      policy => "free";

      #

  classes:
    any::
      "vm_registered"   expression => regcmp(".*$(vm_name).*","$(reg_status)");
      "vm_is_on"        expression => regcmp(".*on","$(vm_status)");

      #

  commands:
    vm_registered::
      "$(vcli.VMCMD_STOP)"
      classes => default.if_ok("$(canon_prefix)_stopped");

      "$(vcli.VMCMD_UNREG)"
      classes => default.if_ok("$(canon_prefix)_unregistered"),
      ifvarclass => "$(canon_prefix)_stopped";

      "$(vcli.VIFS_DELETE) \"[$(vcli.ds)] $(vm_name)\" -f"
      classes => default.if_ok("$(canon_prefix)_deleted"),
      ifvarclass => "$(canon_prefix)_unregistered";

  reports:
    verbose::
      "$(vm_name) was stopped"
      ifvarclass => "$(canon_prefix)_stopped";

      "$(vm_name) was unregistered"
      ifvarclass => "$(canon_prefix)_unregistered";

      "$(vm_name) was deleted"
      ifvarclass => "$(canon_prefix)_deleted";
}
