                       EXERCISES

(If you finish early, please study the Reference
Manual, chapters 1 - 4.)


1. Write a policy to signal TERM and then KILL to any
process matching "trn".

  Testing it:

    cp /bin/sleep ~/trn
    ~/trn 1000 &
    cf-agent -f ...

1b. Make a list of processes you don't want to run
(let's say "trn" and "eggdrop") and put this list 
into an slist variable.  Write a promise to signal
'term' and then 'kill' to any process in that
list.
 
==================================================

EXERCISE 2

Write a policy to create /tmp/myname.txt and put
your name in it.


EXERCISE 3

Manually create a template:
echo 'Hello, $(mybundle.myname).  The time is $(sys.date).' > /tmp/file.tmpl


Note: a fully qualified variable consists of the bundle 
name wherein the variable is defined plus the variable 
name.  Example: 

    bundle agent mybundle { vars: "myvar" string => "myvalue"; }

The fully qualified variable name is $(mybundle.myvar).


Now write a policy to populate contents of /tmp/file.txt
using this template file, /tmp/file.tmpl. 

Make sure your bundle defines the variable embedded in the
template, and that your bundle name matches the bundle name
embedded in the template.

Your policy should use an edit_lines bundle containing an
insert_lines promise with the following attributes:

      insert_type => "file",
      expand_scalars => "true";

If you finish before rest of the group, finish studying 
the CFEngine Reference Manual chapters 1 -4, and if you
finish that, then study the Special Topic guide on Editing
File Content.


EXERCISE 4.  Classes.

Set a custom class based on the existance of a file.
For example:

    classes:

       "file_exists"
         
           expression  =>  fileexists("/etc/site_id") ;

Then write another promise that is conditional on the 
above class.

Run it when the file exists, and when it does not, and
observe how CFEngine dynamically configures your server.




EXERCISE 5.  File Editing

Write a policy to create /etc/motd as follows:
It should *always* say "Unauthorized use forbidden."

EXERCISE 5b.  File Editing and Classes
On weekends only it should have an extra line that says
"go home, it's the weekend".

===========================================================

EXERCISE 6.  Running CFEngine Non-Interactively (as a Service)

Demonstrating of CFEngine running in non-interactive
mode, using /var/cfengine/inputs/promises.cf as its
input:


1. Specify a bundlesequence in your policy from exercise 5.

Add to your policy:

   body common control {

        bundlesequence =>  { "..." };

   }


2. Copy exercise 5 to /var/cfengine/inputs/promises.cf, and

3. Make your failsafe.cf identical to promises.cf:

      cd /var/cfengine/inputs
      ln -s promises.cf failsafe.cf

4. Check the syntax of the default input file (promises.cf):

      cf-promises

5. Run CFengine from command line once to make sure
   it all works:

      cf-agent

6. Restart CFEngine service to reload the policy.

      /etc/init.d/cfengine3 restart


7. Make sure you don't have an /etc/motd file: 
 
     rm /etc/motd

8. Watch CFEngine create /etc/motd within 5 minutes.

     watch ls -l /etc/motd 2>/dev/null








EXERCISE 6.  File Editing - replace_patterns - uses COPBL

Create (manually) a data file:

   /tmp/data.txt

        line 1
        line 2
        line 3

Use cf-agent to replace "line 2" with "line two".


EXERCISE 6b.  File Editing - replace_patterns - uses COPBL

Write a policy where the template contains a placeholder tag
of the form __TAGNAME__

The template, /tmpl/motd.tmpl should contain:

    This system is property of __ORGANIZATION__.
    Unauthorized use forbidden.  
    CFEngine maintains this system and last ran on $(sys.date).

Write a CFEngine policy to generate /etc/motd from this
template. 

Your policy should replace __ORGANIZATION__ with the
name of your organization.

Your policy should expand the special variable $(sys.date).

Use all of the following promise types:

delete_lines
insert_lines
replace_patterns

If you finish before rest of the group, finish studying 
the CFEngine Reference Manual chapters 1 -4, and if you
finish that, then study the Special Topic guide on Editing
File Content.


EXERCISE 7. Integrate your motd policy into the default cfengine policy

===============================================================
[For faster students]

EXERCISE 8. Reporting when CFEngine makes a change to your system

Read the Special Topics guide on Reporting.  Now write
a policy that logs to /var/log/repairs.txt if a promise
is repaired by CFEngine.

===============================================================
EXERCISE 9. Methods

Practice using "methods" type promises:

Write a policy that has two bundles.

The first bundle does something visible (such as a
reports type promise that says "bundle1") AND calls
the second bundle.

The second bundle reports "bundle2".


EXERCISE 10. Methods (continued).

Now parameterize the 2nd bundle -- have the
first bundle feed it an argument, and have the
2nd bundle display that argument.




